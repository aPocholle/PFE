// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="incrust_score,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=4,HLS_SYN_FF=540,HLS_SYN_LUT=1056,HLS_VERSION=2019_2}" *)

module incrust_score (
        ap_clk,
        ap_rst_n,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg s_axis_video_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] start_x;
wire   [31:0] start_y;
wire   [31:0] mode;
wire   [11:0] im_1_V_address0;
reg    im_1_V_ce0;
wire   [16:0] im_1_V_q0;
wire   [11:0] im_2_V_address0;
reg    im_2_V_ce0;
wire   [16:0] im_2_V_q0;
wire   [11:0] im_3_V_address0;
reg    im_3_V_ce0;
wire   [16:0] im_3_V_q0;
wire   [11:0] im_0_V_address0;
reg    im_0_V_ce0;
wire   [16:0] im_0_V_q0;
reg    s_axis_video_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln23_fu_362_p2;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln23_reg_616;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln23_reg_616_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_221;
reg   [30:0] i_0_reg_232;
reg  signed [31:0] pixel_1_reg_243;
reg   [30:0] j_0_reg_254;
reg   [31:0] start_y_read_reg_569;
wire    ap_CS_fsm_state1;
reg   [31:0] start_x_read_reg_575;
wire   [31:0] add_ln31_fu_265_p2;
reg   [31:0] add_ln31_reg_585;
wire   [31:0] add_ln31_1_fu_271_p2;
reg   [31:0] add_ln31_1_reg_590;
wire   [0:0] icmp_ln32_fu_277_p2;
reg   [0:0] icmp_ln32_reg_596;
wire   [0:0] and_ln35_fu_301_p2;
reg   [0:0] and_ln35_reg_601;
wire   [0:0] and_ln38_fu_319_p2;
reg   [0:0] and_ln38_reg_606;
wire   [63:0] bound_fu_333_p2;
reg   [63:0] bound_reg_611;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln23_fu_367_p2;
wire   [30:0] select_ln23_3_fu_421_p3;
reg   [23:0] empty_reg_630_0;
reg   [2:0] tmp_keep_V_reg_635;
reg   [2:0] tmp_strb_V_reg_640;
reg   [0:0] tmp_user_V_reg_645;
reg   [0:0] tmp_last_V_reg_650;
reg   [0:0] tmp_id_V_reg_655;
reg   [0:0] tmp_dest_V_reg_660;
wire   [0:0] and_ln31_fu_487_p2;
reg   [0:0] and_ln31_reg_665;
wire   [31:0] pixel_2_fu_507_p3;
wire   [30:0] j_fu_521_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire  signed [63:0] sext_ln33_fu_493_p1;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln35_fu_283_p2;
wire   [0:0] xor_ln32_fu_295_p2;
wire   [0:0] or_ln35_fu_307_p2;
wire   [0:0] icmp_ln38_fu_289_p2;
wire   [0:0] xor_ln35_fu_313_p2;
wire   [31:0] bound_fu_333_p0;
wire   [31:0] bound_fu_333_p1;
wire   [31:0] zext_ln23_1_fu_339_p1;
wire   [31:0] zext_ln26_fu_353_p1;
wire   [30:0] add_ln23_1_fu_373_p2;
wire   [31:0] zext_ln23_fu_379_p1;
wire   [0:0] icmp_ln26_fu_357_p2;
wire   [0:0] icmp_ln31_fu_343_p2;
wire   [0:0] icmp_ln31_3_fu_383_p2;
wire   [0:0] icmp_ln31_1_fu_348_p2;
wire   [0:0] icmp_ln31_4_fu_396_p2;
wire   [30:0] select_ln23_2_fu_409_p3;
wire   [31:0] zext_ln23_2_fu_417_p1;
wire   [0:0] icmp_ln31_5_fu_458_p2;
wire   [0:0] icmp_ln31_2_fu_453_p2;
wire   [0:0] select_ln23_fu_388_p3;
wire   [0:0] or_ln31_fu_469_p2;
wire   [0:0] xor_ln31_1_fu_463_p2;
wire   [0:0] or_ln31_1_fu_475_p2;
wire   [0:0] select_ln23_1_fu_401_p3;
wire   [0:0] xor_ln31_fu_481_p2;
wire   [31:0] pixel_fu_501_p2;
wire   [30:0] add_ln26_fu_515_p2;
wire   [16:0] select_ln32_fu_532_p3;
wire   [16:0] select_ln35_fu_539_p3;
wire   [16:0] video_data_V_1_fu_546_p3;
wire  signed [22:0] sext_ln38_fu_553_p1;
wire   [23:0] zext_ln38_fu_557_p1;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state5;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video_TDATA_int;
wire    s_axis_video_TVALID_int;
reg    s_axis_video_TREADY_int;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video_TKEEP_int;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video_TSTRB_int;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
wire   [23:0] m_axis_video_TDATA_int;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [63:0] bound_fu_333_p00;
wire   [63:0] bound_fu_333_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

incrust_score_im_bkb #(
    .DataWidth( 17 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
im_1_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(im_1_V_address0),
    .ce0(im_1_V_ce0),
    .q0(im_1_V_q0)
);

incrust_score_im_cud #(
    .DataWidth( 17 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
im_2_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(im_2_V_address0),
    .ce0(im_2_V_ce0),
    .q0(im_2_V_q0)
);

incrust_score_im_dEe #(
    .DataWidth( 17 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
im_3_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(im_3_V_address0),
    .ce0(im_3_V_ce0),
    .q0(im_3_V_q0)
);

incrust_score_im_eOg #(
    .DataWidth( 17 ),
    .AddressRange( 2500 ),
    .AddressWidth( 12 ))
im_0_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(im_0_V_address0),
    .ce0(im_0_V_ce0),
    .q0(im_0_V_q0)
);

incrust_score_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
incrust_score_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .start_x(start_x),
    .start_y(start_y),
    .mode(mode)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int),
    .vld_out(s_axis_video_TVALID_int),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_video_TDATA_int),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_635),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_640),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_645),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_650),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_655),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_660),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_232 <= select_ln23_3_fu_421_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_232 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_221 <= add_ln23_fu_367_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_221 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_254 <= j_fu_521_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        j_0_reg_254 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pixel_1_reg_243 <= pixel_2_fu_507_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pixel_1_reg_243 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln31_1_reg_590 <= add_ln31_1_fu_271_p2;
        add_ln31_reg_585 <= add_ln31_fu_265_p2;
        and_ln35_reg_601 <= and_ln35_fu_301_p2;
        and_ln38_reg_606 <= and_ln38_fu_319_p2;
        bound_reg_611 <= bound_fu_333_p2;
        icmp_ln32_reg_596 <= icmp_ln32_fu_277_p2;
        start_x_read_reg_575 <= start_x;
        start_y_read_reg_569 <= start_y;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln31_reg_665 <= and_ln31_fu_487_p2;
        empty_reg_630_0 <= s_axis_video_TDATA_int;
        tmp_dest_V_reg_660 <= s_axis_video_TDEST_int;
        tmp_id_V_reg_655 <= s_axis_video_TID_int;
        tmp_keep_V_reg_635 <= s_axis_video_TKEEP_int;
        tmp_last_V_reg_650 <= s_axis_video_TLAST_int;
        tmp_strb_V_reg_640 <= s_axis_video_TSTRB_int;
        tmp_user_V_reg_645 <= s_axis_video_TUSER_int;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln23_reg_616 <= icmp_ln23_fu_362_p2;
        icmp_ln23_reg_616_pp0_iter1_reg <= icmp_ln23_reg_616;
    end
end

always @ (*) begin
    if ((icmp_ln23_fu_362_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        im_0_V_ce0 = 1'b1;
    end else begin
        im_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        im_1_V_ce0 = 1'b1;
    end else begin
        im_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        im_2_V_ce0 = 1'b1;
    end else begin
        im_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        im_3_V_ce0 = 1'b1;
    end else begin
        im_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln23_reg_616_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln23_reg_616 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln23_reg_616 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_362_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s_axis_video_V_data_V_U_ack_in == 1'b1) & (s_axis_video_TVALID == 1'b1))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_video_TREADY_int = 1'b1;
    end else begin
        s_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln23_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln23_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_1_fu_373_p2 = (i_0_reg_232 + 31'd1);

assign add_ln23_fu_367_p2 = (indvar_flatten_reg_221 + 64'd1);

assign add_ln26_fu_515_p2 = (j_0_reg_254 + 31'd1);

assign add_ln31_1_fu_271_p2 = (start_y + 32'd50);

assign add_ln31_fu_265_p2 = (start_x + 32'd50);

assign and_ln31_fu_487_p2 = (xor_ln31_fu_481_p2 & select_ln23_1_fu_401_p3);

assign and_ln35_fu_301_p2 = (xor_ln32_fu_295_p2 & icmp_ln35_fu_283_p2);

assign and_ln38_fu_319_p2 = (xor_ln35_fu_313_p2 & icmp_ln38_fu_289_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln23_fu_362_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln23_fu_362_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln23_fu_362_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln23_fu_362_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln23_reg_616 == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln23_reg_616_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_333_p0 = bound_fu_333_p00;

assign bound_fu_333_p00 = hsize_in;

assign bound_fu_333_p1 = bound_fu_333_p10;

assign bound_fu_333_p10 = vsize_in;

assign bound_fu_333_p2 = (bound_fu_333_p0 * bound_fu_333_p1);

assign icmp_ln23_fu_362_p2 = ((indvar_flatten_reg_221 == bound_reg_611) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_357_p2 = (($signed(zext_ln26_fu_353_p1) < $signed(hsize_in)) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_348_p2 = (($signed(zext_ln23_1_fu_339_p1) < $signed(add_ln31_1_reg_590)) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_453_p2 = (($signed(zext_ln23_2_fu_417_p1) < $signed(start_x_read_reg_575)) ? 1'b1 : 1'b0);

assign icmp_ln31_3_fu_383_p2 = (($signed(zext_ln23_fu_379_p1) < $signed(start_y_read_reg_569)) ? 1'b1 : 1'b0);

assign icmp_ln31_4_fu_396_p2 = (($signed(zext_ln23_fu_379_p1) < $signed(add_ln31_1_reg_590)) ? 1'b1 : 1'b0);

assign icmp_ln31_5_fu_458_p2 = (($signed(zext_ln23_2_fu_417_p1) < $signed(add_ln31_reg_585)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_343_p2 = (($signed(zext_ln23_1_fu_339_p1) < $signed(start_y_read_reg_569)) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_277_p2 = ((mode == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_283_p2 = ((mode == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_289_p2 = ((mode == 32'd3) ? 1'b1 : 1'b0);

assign im_0_V_address0 = sext_ln33_fu_493_p1;

assign im_1_V_address0 = sext_ln33_fu_493_p1;

assign im_2_V_address0 = sext_ln33_fu_493_p1;

assign im_3_V_address0 = sext_ln33_fu_493_p1;

assign j_fu_521_p3 = ((icmp_ln26_fu_357_p2[0:0] === 1'b1) ? add_ln26_fu_515_p2 : 31'd1);

assign m_axis_video_TDATA_int = ((and_ln31_reg_665[0:0] === 1'b1) ? zext_ln38_fu_557_p1 : empty_reg_630_0);

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign or_ln31_1_fu_475_p2 = (xor_ln31_1_fu_463_p2 | or_ln31_fu_469_p2);

assign or_ln31_fu_469_p2 = (select_ln23_fu_388_p3 | icmp_ln31_2_fu_453_p2);

assign or_ln35_fu_307_p2 = (icmp_ln35_fu_283_p2 | icmp_ln32_fu_277_p2);

assign pixel_2_fu_507_p3 = ((and_ln31_fu_487_p2[0:0] === 1'b1) ? pixel_fu_501_p2 : pixel_1_reg_243);

assign pixel_fu_501_p2 = ($signed(pixel_1_reg_243) + $signed(32'd1));

assign select_ln23_1_fu_401_p3 = ((icmp_ln26_fu_357_p2[0:0] === 1'b1) ? icmp_ln31_1_fu_348_p2 : icmp_ln31_4_fu_396_p2);

assign select_ln23_2_fu_409_p3 = ((icmp_ln26_fu_357_p2[0:0] === 1'b1) ? j_0_reg_254 : 31'd0);

assign select_ln23_3_fu_421_p3 = ((icmp_ln26_fu_357_p2[0:0] === 1'b1) ? i_0_reg_232 : add_ln23_1_fu_373_p2);

assign select_ln23_fu_388_p3 = ((icmp_ln26_fu_357_p2[0:0] === 1'b1) ? icmp_ln31_fu_343_p2 : icmp_ln31_3_fu_383_p2);

assign select_ln32_fu_532_p3 = ((icmp_ln32_reg_596[0:0] === 1'b1) ? im_1_V_q0 : im_0_V_q0);

assign select_ln35_fu_539_p3 = ((and_ln35_reg_601[0:0] === 1'b1) ? im_2_V_q0 : select_ln32_fu_532_p3);

assign sext_ln33_fu_493_p1 = pixel_1_reg_243;

assign sext_ln38_fu_553_p1 = $signed(video_data_V_1_fu_546_p3);

assign video_data_V_1_fu_546_p3 = ((and_ln38_reg_606[0:0] === 1'b1) ? im_3_V_q0 : select_ln35_fu_539_p3);

assign xor_ln31_1_fu_463_p2 = (icmp_ln31_5_fu_458_p2 ^ 1'd1);

assign xor_ln31_fu_481_p2 = (or_ln31_1_fu_475_p2 ^ 1'd1);

assign xor_ln32_fu_295_p2 = (icmp_ln32_fu_277_p2 ^ 1'd1);

assign xor_ln35_fu_313_p2 = (or_ln35_fu_307_p2 ^ 1'd1);

assign zext_ln23_1_fu_339_p1 = i_0_reg_232;

assign zext_ln23_2_fu_417_p1 = select_ln23_2_fu_409_p3;

assign zext_ln23_fu_379_p1 = add_ln23_1_fu_373_p2;

assign zext_ln26_fu_353_p1 = j_0_reg_254;

assign zext_ln38_fu_557_p1 = $unsigned(sext_ln38_fu_553_p1);

endmodule //incrust_score
