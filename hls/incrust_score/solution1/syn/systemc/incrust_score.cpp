// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "incrust_score.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic incrust_score::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic incrust_score::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> incrust_score::ap_ST_fsm_state1 = "1";
const sc_lv<3> incrust_score::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> incrust_score::ap_ST_fsm_state5 = "100";
const bool incrust_score::ap_const_boolean_1 = true;
const sc_lv<32> incrust_score::ap_const_lv32_1 = "1";
const bool incrust_score::ap_const_boolean_0 = false;
const sc_lv<1> incrust_score::ap_const_lv1_0 = "0";
const int incrust_score::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> incrust_score::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> incrust_score::ap_const_lv1_1 = "1";
const sc_lv<64> incrust_score::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<31> incrust_score::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> incrust_score::ap_const_lv32_32 = "110010";
const sc_lv<32> incrust_score::ap_const_lv32_2 = "10";
const sc_lv<32> incrust_score::ap_const_lv32_3 = "11";
const sc_lv<64> incrust_score::ap_const_lv64_1 = "1";
const sc_lv<31> incrust_score::ap_const_lv31_1 = "1";

incrust_score::incrust_score(sc_module_name name) : sc_module(name), mVcdFile(0) {
    im_1_V_U = new incrust_score_im_bkb("im_1_V_U");
    im_1_V_U->clk(ap_clk);
    im_1_V_U->reset(ap_rst_n_inv);
    im_1_V_U->address0(im_1_V_address0);
    im_1_V_U->ce0(im_1_V_ce0);
    im_1_V_U->q0(im_1_V_q0);
    im_2_V_U = new incrust_score_im_cud("im_2_V_U");
    im_2_V_U->clk(ap_clk);
    im_2_V_U->reset(ap_rst_n_inv);
    im_2_V_U->address0(im_2_V_address0);
    im_2_V_U->ce0(im_2_V_ce0);
    im_2_V_U->q0(im_2_V_q0);
    im_3_V_U = new incrust_score_im_dEe("im_3_V_U");
    im_3_V_U->clk(ap_clk);
    im_3_V_U->reset(ap_rst_n_inv);
    im_3_V_U->address0(im_3_V_address0);
    im_3_V_U->ce0(im_3_V_ce0);
    im_3_V_U->q0(im_3_V_q0);
    im_0_V_U = new incrust_score_im_eOg("im_0_V_U");
    im_0_V_U->clk(ap_clk);
    im_0_V_U->reset(ap_rst_n_inv);
    im_0_V_U->address0(im_0_V_address0);
    im_0_V_U->ce0(im_0_V_ce0);
    im_0_V_U->q0(im_0_V_q0);
    incrust_score_AXILiteS_s_axi_U = new incrust_score_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("incrust_score_AXILiteS_s_axi_U");
    incrust_score_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    incrust_score_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    incrust_score_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    incrust_score_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    incrust_score_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    incrust_score_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    incrust_score_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    incrust_score_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    incrust_score_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    incrust_score_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    incrust_score_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    incrust_score_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    incrust_score_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    incrust_score_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    incrust_score_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    incrust_score_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    incrust_score_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    incrust_score_AXILiteS_s_axi_U->ACLK(ap_clk);
    incrust_score_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    incrust_score_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    incrust_score_AXILiteS_s_axi_U->start_x(start_x);
    incrust_score_AXILiteS_s_axi_U->start_y(start_y);
    incrust_score_AXILiteS_s_axi_U->mode(mode);
    regslice_both_s_axis_video_V_data_V_U = new regslice_both<24>("regslice_both_s_axis_video_V_data_V_U");
    regslice_both_s_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_data_V_U->data_in(s_axis_video_TDATA);
    regslice_both_s_axis_video_V_data_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_data_V_U->ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in);
    regslice_both_s_axis_video_V_data_V_U->data_out(s_axis_video_TDATA_int);
    regslice_both_s_axis_video_V_data_V_U->vld_out(s_axis_video_TVALID_int);
    regslice_both_s_axis_video_V_data_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_data_V_U->apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk);
    regslice_both_s_axis_video_V_keep_V_U = new regslice_both<3>("regslice_both_s_axis_video_V_keep_V_U");
    regslice_both_s_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_keep_V_U->data_in(s_axis_video_TKEEP);
    regslice_both_s_axis_video_V_keep_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_keep_V_U->ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in);
    regslice_both_s_axis_video_V_keep_V_U->data_out(s_axis_video_TKEEP_int);
    regslice_both_s_axis_video_V_keep_V_U->vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out);
    regslice_both_s_axis_video_V_keep_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_keep_V_U->apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_s_axis_video_V_strb_V_U = new regslice_both<3>("regslice_both_s_axis_video_V_strb_V_U");
    regslice_both_s_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_strb_V_U->data_in(s_axis_video_TSTRB);
    regslice_both_s_axis_video_V_strb_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_strb_V_U->ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in);
    regslice_both_s_axis_video_V_strb_V_U->data_out(s_axis_video_TSTRB_int);
    regslice_both_s_axis_video_V_strb_V_U->vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out);
    regslice_both_s_axis_video_V_strb_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_strb_V_U->apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_s_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_user_V_U");
    regslice_both_s_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_user_V_U->data_in(s_axis_video_TUSER);
    regslice_both_s_axis_video_V_user_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_user_V_U->ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in);
    regslice_both_s_axis_video_V_user_V_U->data_out(s_axis_video_TUSER_int);
    regslice_both_s_axis_video_V_user_V_U->vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out);
    regslice_both_s_axis_video_V_user_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_user_V_U->apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk);
    regslice_both_s_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_last_V_U");
    regslice_both_s_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_last_V_U->data_in(s_axis_video_TLAST);
    regslice_both_s_axis_video_V_last_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_last_V_U->ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in);
    regslice_both_s_axis_video_V_last_V_U->data_out(s_axis_video_TLAST_int);
    regslice_both_s_axis_video_V_last_V_U->vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out);
    regslice_both_s_axis_video_V_last_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_last_V_U->apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk);
    regslice_both_s_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_id_V_U");
    regslice_both_s_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_id_V_U->data_in(s_axis_video_TID);
    regslice_both_s_axis_video_V_id_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_id_V_U->ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in);
    regslice_both_s_axis_video_V_id_V_U->data_out(s_axis_video_TID_int);
    regslice_both_s_axis_video_V_id_V_U->vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out);
    regslice_both_s_axis_video_V_id_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_id_V_U->apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk);
    regslice_both_s_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_s_axis_video_V_dest_V_U");
    regslice_both_s_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_s_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_s_axis_video_V_dest_V_U->data_in(s_axis_video_TDEST);
    regslice_both_s_axis_video_V_dest_V_U->vld_in(s_axis_video_TVALID);
    regslice_both_s_axis_video_V_dest_V_U->ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in);
    regslice_both_s_axis_video_V_dest_V_U->data_out(s_axis_video_TDEST_int);
    regslice_both_s_axis_video_V_dest_V_U->vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out);
    regslice_both_s_axis_video_V_dest_V_U->ack_out(s_axis_video_TREADY_int);
    regslice_both_s_axis_video_V_dest_V_U->apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk);
    regslice_both_m_axis_video_V_data_V_U = new regslice_both<24>("regslice_both_m_axis_video_V_data_V_U");
    regslice_both_m_axis_video_V_data_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_data_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_data_V_U->data_in(m_axis_video_TDATA_int);
    regslice_both_m_axis_video_V_data_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_data_V_U->ack_in(m_axis_video_TREADY_int);
    regslice_both_m_axis_video_V_data_V_U->data_out(m_axis_video_TDATA);
    regslice_both_m_axis_video_V_data_V_U->vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out);
    regslice_both_m_axis_video_V_data_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_data_V_U->apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk);
    regslice_both_m_axis_video_V_keep_V_U = new regslice_both<3>("regslice_both_m_axis_video_V_keep_V_U");
    regslice_both_m_axis_video_V_keep_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_keep_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_keep_V_U->data_in(tmp_keep_V_reg_635);
    regslice_both_m_axis_video_V_keep_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_keep_V_U->ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_keep_V_U->data_out(m_axis_video_TKEEP);
    regslice_both_m_axis_video_V_keep_V_U->vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out);
    regslice_both_m_axis_video_V_keep_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_keep_V_U->apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk);
    regslice_both_m_axis_video_V_strb_V_U = new regslice_both<3>("regslice_both_m_axis_video_V_strb_V_U");
    regslice_both_m_axis_video_V_strb_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_strb_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_strb_V_U->data_in(tmp_strb_V_reg_640);
    regslice_both_m_axis_video_V_strb_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_strb_V_U->ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_strb_V_U->data_out(m_axis_video_TSTRB);
    regslice_both_m_axis_video_V_strb_V_U->vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out);
    regslice_both_m_axis_video_V_strb_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_strb_V_U->apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk);
    regslice_both_m_axis_video_V_user_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_user_V_U");
    regslice_both_m_axis_video_V_user_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_user_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_user_V_U->data_in(tmp_user_V_reg_645);
    regslice_both_m_axis_video_V_user_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_user_V_U->ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_user_V_U->data_out(m_axis_video_TUSER);
    regslice_both_m_axis_video_V_user_V_U->vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out);
    regslice_both_m_axis_video_V_user_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_user_V_U->apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk);
    regslice_both_m_axis_video_V_last_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_last_V_U");
    regslice_both_m_axis_video_V_last_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_last_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_last_V_U->data_in(tmp_last_V_reg_650);
    regslice_both_m_axis_video_V_last_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_last_V_U->ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_last_V_U->data_out(m_axis_video_TLAST);
    regslice_both_m_axis_video_V_last_V_U->vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out);
    regslice_both_m_axis_video_V_last_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_last_V_U->apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk);
    regslice_both_m_axis_video_V_id_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_id_V_U");
    regslice_both_m_axis_video_V_id_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_id_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_id_V_U->data_in(tmp_id_V_reg_655);
    regslice_both_m_axis_video_V_id_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_id_V_U->ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_id_V_U->data_out(m_axis_video_TID);
    regslice_both_m_axis_video_V_id_V_U->vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out);
    regslice_both_m_axis_video_V_id_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_id_V_U->apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk);
    regslice_both_m_axis_video_V_dest_V_U = new regslice_both<1>("regslice_both_m_axis_video_V_dest_V_U");
    regslice_both_m_axis_video_V_dest_V_U->ap_clk(ap_clk);
    regslice_both_m_axis_video_V_dest_V_U->ap_rst(ap_rst_n_inv);
    regslice_both_m_axis_video_V_dest_V_U->data_in(tmp_dest_V_reg_660);
    regslice_both_m_axis_video_V_dest_V_U->vld_in(m_axis_video_TVALID_int);
    regslice_both_m_axis_video_V_dest_V_U->ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy);
    regslice_both_m_axis_video_V_dest_V_U->data_out(m_axis_video_TDEST);
    regslice_both_m_axis_video_V_dest_V_U->vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out);
    regslice_both_m_axis_video_V_dest_V_U->ack_out(m_axis_video_TREADY);
    regslice_both_m_axis_video_V_dest_V_U->apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln23_1_fu_373_p2);
    sensitive << ( i_0_reg_232 );

    SC_METHOD(thread_add_ln23_fu_367_p2);
    sensitive << ( indvar_flatten_reg_221 );

    SC_METHOD(thread_add_ln26_fu_515_p2);
    sensitive << ( j_0_reg_254 );

    SC_METHOD(thread_add_ln31_1_fu_271_p2);
    sensitive << ( start_y );

    SC_METHOD(thread_add_ln31_fu_265_p2);
    sensitive << ( start_x );

    SC_METHOD(thread_and_ln31_fu_487_p2);
    sensitive << ( select_ln23_1_fu_401_p3 );
    sensitive << ( xor_ln31_fu_481_p2 );

    SC_METHOD(thread_and_ln35_fu_301_p2);
    sensitive << ( icmp_ln35_fu_283_p2 );
    sensitive << ( xor_ln32_fu_295_p2 );

    SC_METHOD(thread_and_ln38_fu_319_p2);
    sensitive << ( icmp_ln38_fu_289_p2 );
    sensitive << ( xor_ln35_fu_313_p2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state3_io );
    sensitive << ( ap_block_state4_io );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_ap_block_state3_io);
    sensitive << ( icmp_ln23_reg_616 );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( icmp_ln23_reg_616_pp0_iter1_reg );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln23_fu_362_p2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bound_fu_333_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bound_fu_333_p00 );

    SC_METHOD(thread_bound_fu_333_p00);
    sensitive << ( hsize_in );

    SC_METHOD(thread_bound_fu_333_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( bound_fu_333_p10 );

    SC_METHOD(thread_bound_fu_333_p10);
    sensitive << ( vsize_in );

    SC_METHOD(thread_bound_fu_333_p2);
    sensitive << ( bound_fu_333_p0 );
    sensitive << ( bound_fu_333_p1 );

    SC_METHOD(thread_icmp_ln23_fu_362_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvar_flatten_reg_221 );
    sensitive << ( bound_reg_611 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_icmp_ln26_fu_357_p2);
    sensitive << ( hsize_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln26_fu_353_p1 );

    SC_METHOD(thread_icmp_ln31_1_fu_348_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( add_ln31_1_reg_590 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln23_1_fu_339_p1 );

    SC_METHOD(thread_icmp_ln31_2_fu_453_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( start_x_read_reg_575 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln23_2_fu_417_p1 );

    SC_METHOD(thread_icmp_ln31_3_fu_383_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( start_y_read_reg_569 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln23_fu_379_p1 );

    SC_METHOD(thread_icmp_ln31_4_fu_396_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( add_ln31_1_reg_590 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln23_fu_379_p1 );

    SC_METHOD(thread_icmp_ln31_5_fu_458_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( add_ln31_reg_585 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln23_2_fu_417_p1 );

    SC_METHOD(thread_icmp_ln31_fu_343_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( start_y_read_reg_569 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( zext_ln23_1_fu_339_p1 );

    SC_METHOD(thread_icmp_ln32_fu_277_p2);
    sensitive << ( mode );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln35_fu_283_p2);
    sensitive << ( mode );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln38_fu_289_p2);
    sensitive << ( mode );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_im_0_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln33_fu_493_p1 );

    SC_METHOD(thread_im_0_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_im_1_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln33_fu_493_p1 );

    SC_METHOD(thread_im_1_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_im_2_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln33_fu_493_p1 );

    SC_METHOD(thread_im_2_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_im_3_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln33_fu_493_p1 );

    SC_METHOD(thread_im_3_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_j_fu_521_p3);
    sensitive << ( icmp_ln26_fu_357_p2 );
    sensitive << ( add_ln26_fu_515_p2 );

    SC_METHOD(thread_m_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln23_reg_616 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln23_reg_616_pp0_iter1_reg );
    sensitive << ( m_axis_video_TREADY_int );

    SC_METHOD(thread_m_axis_video_TDATA_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln23_reg_616 );
    sensitive << ( empty_reg_630_0 );
    sensitive << ( and_ln31_reg_665 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( zext_ln38_fu_557_p1 );

    SC_METHOD(thread_m_axis_video_TVALID);
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_vld_out );

    SC_METHOD(thread_m_axis_video_TVALID_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln23_reg_616 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_or_ln31_1_fu_475_p2);
    sensitive << ( or_ln31_fu_469_p2 );
    sensitive << ( xor_ln31_1_fu_463_p2 );

    SC_METHOD(thread_or_ln31_fu_469_p2);
    sensitive << ( icmp_ln31_2_fu_453_p2 );
    sensitive << ( select_ln23_fu_388_p3 );

    SC_METHOD(thread_or_ln35_fu_307_p2);
    sensitive << ( icmp_ln32_fu_277_p2 );
    sensitive << ( icmp_ln35_fu_283_p2 );

    SC_METHOD(thread_pixel_2_fu_507_p3);
    sensitive << ( pixel_1_reg_243 );
    sensitive << ( and_ln31_fu_487_p2 );
    sensitive << ( pixel_fu_501_p2 );

    SC_METHOD(thread_pixel_fu_501_p2);
    sensitive << ( pixel_1_reg_243 );

    SC_METHOD(thread_s_axis_video_TDATA_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( s_axis_video_TVALID_int );

    SC_METHOD(thread_s_axis_video_TREADY);
    sensitive << ( s_axis_video_TVALID );
    sensitive << ( regslice_both_s_axis_video_V_data_V_U_ack_in );

    SC_METHOD(thread_s_axis_video_TREADY_int);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_select_ln23_1_fu_401_p3);
    sensitive << ( icmp_ln26_fu_357_p2 );
    sensitive << ( icmp_ln31_1_fu_348_p2 );
    sensitive << ( icmp_ln31_4_fu_396_p2 );

    SC_METHOD(thread_select_ln23_2_fu_409_p3);
    sensitive << ( j_0_reg_254 );
    sensitive << ( icmp_ln26_fu_357_p2 );

    SC_METHOD(thread_select_ln23_3_fu_421_p3);
    sensitive << ( i_0_reg_232 );
    sensitive << ( add_ln23_1_fu_373_p2 );
    sensitive << ( icmp_ln26_fu_357_p2 );

    SC_METHOD(thread_select_ln23_fu_388_p3);
    sensitive << ( icmp_ln26_fu_357_p2 );
    sensitive << ( icmp_ln31_fu_343_p2 );
    sensitive << ( icmp_ln31_3_fu_383_p2 );

    SC_METHOD(thread_select_ln32_fu_532_p3);
    sensitive << ( im_1_V_q0 );
    sensitive << ( im_0_V_q0 );
    sensitive << ( icmp_ln32_reg_596 );

    SC_METHOD(thread_select_ln35_fu_539_p3);
    sensitive << ( im_2_V_q0 );
    sensitive << ( and_ln35_reg_601 );
    sensitive << ( select_ln32_fu_532_p3 );

    SC_METHOD(thread_sext_ln33_fu_493_p1);
    sensitive << ( pixel_1_reg_243 );

    SC_METHOD(thread_sext_ln38_fu_553_p1);
    sensitive << ( video_data_V_1_fu_546_p3 );

    SC_METHOD(thread_video_data_V_1_fu_546_p3);
    sensitive << ( im_3_V_q0 );
    sensitive << ( and_ln38_reg_606 );
    sensitive << ( select_ln35_fu_539_p3 );

    SC_METHOD(thread_xor_ln31_1_fu_463_p2);
    sensitive << ( icmp_ln31_5_fu_458_p2 );

    SC_METHOD(thread_xor_ln31_fu_481_p2);
    sensitive << ( or_ln31_1_fu_475_p2 );

    SC_METHOD(thread_xor_ln32_fu_295_p2);
    sensitive << ( icmp_ln32_fu_277_p2 );

    SC_METHOD(thread_xor_ln35_fu_313_p2);
    sensitive << ( or_ln35_fu_307_p2 );

    SC_METHOD(thread_zext_ln23_1_fu_339_p1);
    sensitive << ( i_0_reg_232 );

    SC_METHOD(thread_zext_ln23_2_fu_417_p1);
    sensitive << ( select_ln23_2_fu_409_p3 );

    SC_METHOD(thread_zext_ln23_fu_379_p1);
    sensitive << ( add_ln23_1_fu_373_p2 );

    SC_METHOD(thread_zext_ln26_fu_353_p1);
    sensitive << ( j_0_reg_254 );

    SC_METHOD(thread_zext_ln38_fu_557_p1);
    sensitive << ( sext_ln38_fu_553_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln23_fu_362_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( regslice_both_m_axis_video_V_data_V_U_apdone_blk );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "incrust_score_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axis_video_TDATA, "(port)s_axis_video_TDATA");
    sc_trace(mVcdFile, s_axis_video_TVALID, "(port)s_axis_video_TVALID");
    sc_trace(mVcdFile, s_axis_video_TREADY, "(port)s_axis_video_TREADY");
    sc_trace(mVcdFile, s_axis_video_TKEEP, "(port)s_axis_video_TKEEP");
    sc_trace(mVcdFile, s_axis_video_TSTRB, "(port)s_axis_video_TSTRB");
    sc_trace(mVcdFile, s_axis_video_TUSER, "(port)s_axis_video_TUSER");
    sc_trace(mVcdFile, s_axis_video_TLAST, "(port)s_axis_video_TLAST");
    sc_trace(mVcdFile, s_axis_video_TID, "(port)s_axis_video_TID");
    sc_trace(mVcdFile, s_axis_video_TDEST, "(port)s_axis_video_TDEST");
    sc_trace(mVcdFile, m_axis_video_TDATA, "(port)m_axis_video_TDATA");
    sc_trace(mVcdFile, m_axis_video_TVALID, "(port)m_axis_video_TVALID");
    sc_trace(mVcdFile, m_axis_video_TREADY, "(port)m_axis_video_TREADY");
    sc_trace(mVcdFile, m_axis_video_TKEEP, "(port)m_axis_video_TKEEP");
    sc_trace(mVcdFile, m_axis_video_TSTRB, "(port)m_axis_video_TSTRB");
    sc_trace(mVcdFile, m_axis_video_TUSER, "(port)m_axis_video_TUSER");
    sc_trace(mVcdFile, m_axis_video_TLAST, "(port)m_axis_video_TLAST");
    sc_trace(mVcdFile, m_axis_video_TID, "(port)m_axis_video_TID");
    sc_trace(mVcdFile, m_axis_video_TDEST, "(port)m_axis_video_TDEST");
    sc_trace(mVcdFile, hsize_in, "(port)hsize_in");
    sc_trace(mVcdFile, vsize_in, "(port)vsize_in");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, start_x, "start_x");
    sc_trace(mVcdFile, start_y, "start_y");
    sc_trace(mVcdFile, mode, "mode");
    sc_trace(mVcdFile, im_1_V_address0, "im_1_V_address0");
    sc_trace(mVcdFile, im_1_V_ce0, "im_1_V_ce0");
    sc_trace(mVcdFile, im_1_V_q0, "im_1_V_q0");
    sc_trace(mVcdFile, im_2_V_address0, "im_2_V_address0");
    sc_trace(mVcdFile, im_2_V_ce0, "im_2_V_ce0");
    sc_trace(mVcdFile, im_2_V_q0, "im_2_V_q0");
    sc_trace(mVcdFile, im_3_V_address0, "im_3_V_address0");
    sc_trace(mVcdFile, im_3_V_ce0, "im_3_V_ce0");
    sc_trace(mVcdFile, im_3_V_q0, "im_3_V_q0");
    sc_trace(mVcdFile, im_0_V_address0, "im_0_V_address0");
    sc_trace(mVcdFile, im_0_V_ce0, "im_0_V_ce0");
    sc_trace(mVcdFile, im_0_V_q0, "im_0_V_q0");
    sc_trace(mVcdFile, s_axis_video_TDATA_blk_n, "s_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln23_fu_362_p2, "icmp_ln23_fu_362_p2");
    sc_trace(mVcdFile, m_axis_video_TDATA_blk_n, "m_axis_video_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp_ln23_reg_616, "icmp_ln23_reg_616");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln23_reg_616_pp0_iter1_reg, "icmp_ln23_reg_616_pp0_iter1_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_221, "indvar_flatten_reg_221");
    sc_trace(mVcdFile, i_0_reg_232, "i_0_reg_232");
    sc_trace(mVcdFile, pixel_1_reg_243, "pixel_1_reg_243");
    sc_trace(mVcdFile, j_0_reg_254, "j_0_reg_254");
    sc_trace(mVcdFile, start_y_read_reg_569, "start_y_read_reg_569");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, start_x_read_reg_575, "start_x_read_reg_575");
    sc_trace(mVcdFile, add_ln31_fu_265_p2, "add_ln31_fu_265_p2");
    sc_trace(mVcdFile, add_ln31_reg_585, "add_ln31_reg_585");
    sc_trace(mVcdFile, add_ln31_1_fu_271_p2, "add_ln31_1_fu_271_p2");
    sc_trace(mVcdFile, add_ln31_1_reg_590, "add_ln31_1_reg_590");
    sc_trace(mVcdFile, icmp_ln32_fu_277_p2, "icmp_ln32_fu_277_p2");
    sc_trace(mVcdFile, icmp_ln32_reg_596, "icmp_ln32_reg_596");
    sc_trace(mVcdFile, and_ln35_fu_301_p2, "and_ln35_fu_301_p2");
    sc_trace(mVcdFile, and_ln35_reg_601, "and_ln35_reg_601");
    sc_trace(mVcdFile, and_ln38_fu_319_p2, "and_ln38_fu_319_p2");
    sc_trace(mVcdFile, and_ln38_reg_606, "and_ln38_reg_606");
    sc_trace(mVcdFile, bound_fu_333_p2, "bound_fu_333_p2");
    sc_trace(mVcdFile, bound_reg_611, "bound_reg_611");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_io, "ap_block_state3_io");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln23_fu_367_p2, "add_ln23_fu_367_p2");
    sc_trace(mVcdFile, select_ln23_3_fu_421_p3, "select_ln23_3_fu_421_p3");
    sc_trace(mVcdFile, empty_reg_630_0, "empty_reg_630_0");
    sc_trace(mVcdFile, tmp_keep_V_reg_635, "tmp_keep_V_reg_635");
    sc_trace(mVcdFile, tmp_strb_V_reg_640, "tmp_strb_V_reg_640");
    sc_trace(mVcdFile, tmp_user_V_reg_645, "tmp_user_V_reg_645");
    sc_trace(mVcdFile, tmp_last_V_reg_650, "tmp_last_V_reg_650");
    sc_trace(mVcdFile, tmp_id_V_reg_655, "tmp_id_V_reg_655");
    sc_trace(mVcdFile, tmp_dest_V_reg_660, "tmp_dest_V_reg_660");
    sc_trace(mVcdFile, and_ln31_fu_487_p2, "and_ln31_fu_487_p2");
    sc_trace(mVcdFile, and_ln31_reg_665, "and_ln31_reg_665");
    sc_trace(mVcdFile, pixel_2_fu_507_p3, "pixel_2_fu_507_p3");
    sc_trace(mVcdFile, j_fu_521_p3, "j_fu_521_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, sext_ln33_fu_493_p1, "sext_ln33_fu_493_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, icmp_ln35_fu_283_p2, "icmp_ln35_fu_283_p2");
    sc_trace(mVcdFile, xor_ln32_fu_295_p2, "xor_ln32_fu_295_p2");
    sc_trace(mVcdFile, or_ln35_fu_307_p2, "or_ln35_fu_307_p2");
    sc_trace(mVcdFile, icmp_ln38_fu_289_p2, "icmp_ln38_fu_289_p2");
    sc_trace(mVcdFile, xor_ln35_fu_313_p2, "xor_ln35_fu_313_p2");
    sc_trace(mVcdFile, bound_fu_333_p0, "bound_fu_333_p0");
    sc_trace(mVcdFile, bound_fu_333_p1, "bound_fu_333_p1");
    sc_trace(mVcdFile, zext_ln23_1_fu_339_p1, "zext_ln23_1_fu_339_p1");
    sc_trace(mVcdFile, zext_ln26_fu_353_p1, "zext_ln26_fu_353_p1");
    sc_trace(mVcdFile, add_ln23_1_fu_373_p2, "add_ln23_1_fu_373_p2");
    sc_trace(mVcdFile, zext_ln23_fu_379_p1, "zext_ln23_fu_379_p1");
    sc_trace(mVcdFile, icmp_ln26_fu_357_p2, "icmp_ln26_fu_357_p2");
    sc_trace(mVcdFile, icmp_ln31_fu_343_p2, "icmp_ln31_fu_343_p2");
    sc_trace(mVcdFile, icmp_ln31_3_fu_383_p2, "icmp_ln31_3_fu_383_p2");
    sc_trace(mVcdFile, icmp_ln31_1_fu_348_p2, "icmp_ln31_1_fu_348_p2");
    sc_trace(mVcdFile, icmp_ln31_4_fu_396_p2, "icmp_ln31_4_fu_396_p2");
    sc_trace(mVcdFile, select_ln23_2_fu_409_p3, "select_ln23_2_fu_409_p3");
    sc_trace(mVcdFile, zext_ln23_2_fu_417_p1, "zext_ln23_2_fu_417_p1");
    sc_trace(mVcdFile, icmp_ln31_5_fu_458_p2, "icmp_ln31_5_fu_458_p2");
    sc_trace(mVcdFile, icmp_ln31_2_fu_453_p2, "icmp_ln31_2_fu_453_p2");
    sc_trace(mVcdFile, select_ln23_fu_388_p3, "select_ln23_fu_388_p3");
    sc_trace(mVcdFile, or_ln31_fu_469_p2, "or_ln31_fu_469_p2");
    sc_trace(mVcdFile, xor_ln31_1_fu_463_p2, "xor_ln31_1_fu_463_p2");
    sc_trace(mVcdFile, or_ln31_1_fu_475_p2, "or_ln31_1_fu_475_p2");
    sc_trace(mVcdFile, select_ln23_1_fu_401_p3, "select_ln23_1_fu_401_p3");
    sc_trace(mVcdFile, xor_ln31_fu_481_p2, "xor_ln31_fu_481_p2");
    sc_trace(mVcdFile, pixel_fu_501_p2, "pixel_fu_501_p2");
    sc_trace(mVcdFile, add_ln26_fu_515_p2, "add_ln26_fu_515_p2");
    sc_trace(mVcdFile, select_ln32_fu_532_p3, "select_ln32_fu_532_p3");
    sc_trace(mVcdFile, select_ln35_fu_539_p3, "select_ln35_fu_539_p3");
    sc_trace(mVcdFile, video_data_V_1_fu_546_p3, "video_data_V_1_fu_546_p3");
    sc_trace(mVcdFile, sext_ln38_fu_553_p1, "sext_ln38_fu_553_p1");
    sc_trace(mVcdFile, zext_ln38_fu_557_p1, "zext_ln38_fu_557_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_apdone_blk, "regslice_both_m_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_apdone_blk, "regslice_both_s_axis_video_V_data_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDATA_int, "s_axis_video_TDATA_int");
    sc_trace(mVcdFile, s_axis_video_TVALID_int, "s_axis_video_TVALID_int");
    sc_trace(mVcdFile, s_axis_video_TREADY_int, "s_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_data_V_U_ack_in, "regslice_both_s_axis_video_V_data_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_apdone_blk, "regslice_both_s_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TKEEP_int, "s_axis_video_TKEEP_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_vld_out, "regslice_both_s_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_keep_V_U_ack_in, "regslice_both_s_axis_video_V_keep_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_apdone_blk, "regslice_both_s_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TSTRB_int, "s_axis_video_TSTRB_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_vld_out, "regslice_both_s_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_strb_V_U_ack_in, "regslice_both_s_axis_video_V_strb_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_apdone_blk, "regslice_both_s_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TUSER_int, "s_axis_video_TUSER_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_vld_out, "regslice_both_s_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_user_V_U_ack_in, "regslice_both_s_axis_video_V_user_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_apdone_blk, "regslice_both_s_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TLAST_int, "s_axis_video_TLAST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_vld_out, "regslice_both_s_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_last_V_U_ack_in, "regslice_both_s_axis_video_V_last_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_apdone_blk, "regslice_both_s_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TID_int, "s_axis_video_TID_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_vld_out, "regslice_both_s_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_id_V_U_ack_in, "regslice_both_s_axis_video_V_id_V_U_ack_in");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_apdone_blk, "regslice_both_s_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, s_axis_video_TDEST_int, "s_axis_video_TDEST_int");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_vld_out, "regslice_both_s_axis_video_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_s_axis_video_V_dest_V_U_ack_in, "regslice_both_s_axis_video_V_dest_V_U_ack_in");
    sc_trace(mVcdFile, m_axis_video_TDATA_int, "m_axis_video_TDATA_int");
    sc_trace(mVcdFile, m_axis_video_TVALID_int, "m_axis_video_TVALID_int");
    sc_trace(mVcdFile, m_axis_video_TREADY_int, "m_axis_video_TREADY_int");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_data_V_U_vld_out, "regslice_both_m_axis_video_V_data_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_apdone_blk, "regslice_both_m_axis_video_V_keep_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_keep_V_U_vld_out, "regslice_both_m_axis_video_V_keep_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_apdone_blk, "regslice_both_m_axis_video_V_strb_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_strb_V_U_vld_out, "regslice_both_m_axis_video_V_strb_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_apdone_blk, "regslice_both_m_axis_video_V_user_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_user_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_user_V_U_vld_out, "regslice_both_m_axis_video_V_user_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_apdone_blk, "regslice_both_m_axis_video_V_last_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_last_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_last_V_U_vld_out, "regslice_both_m_axis_video_V_last_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_apdone_blk, "regslice_both_m_axis_video_V_id_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_id_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_id_V_U_vld_out, "regslice_both_m_axis_video_V_id_V_U_vld_out");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_apdone_blk, "regslice_both_m_axis_video_V_dest_V_U_apdone_blk");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy, "regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy");
    sc_trace(mVcdFile, regslice_both_m_axis_video_V_dest_V_U_vld_out, "regslice_both_m_axis_video_V_dest_V_U_vld_out");
    sc_trace(mVcdFile, bound_fu_333_p00, "bound_fu_333_p00");
    sc_trace(mVcdFile, bound_fu_333_p10, "bound_fu_333_p10");
#endif

    }
    mHdltvinHandle.open("incrust_score.hdltvin.dat");
    mHdltvoutHandle.open("incrust_score.hdltvout.dat");
}

incrust_score::~incrust_score() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete im_1_V_U;
    delete im_2_V_U;
    delete im_3_V_U;
    delete im_0_V_U;
    delete incrust_score_AXILiteS_s_axi_U;
    delete regslice_both_s_axis_video_V_data_V_U;
    delete regslice_both_s_axis_video_V_keep_V_U;
    delete regslice_both_s_axis_video_V_strb_V_U;
    delete regslice_both_s_axis_video_V_user_V_U;
    delete regslice_both_s_axis_video_V_last_V_U;
    delete regslice_both_s_axis_video_V_id_V_U;
    delete regslice_both_s_axis_video_V_dest_V_U;
    delete regslice_both_m_axis_video_V_data_V_U;
    delete regslice_both_m_axis_video_V_keep_V_U;
    delete regslice_both_m_axis_video_V_strb_V_U;
    delete regslice_both_m_axis_video_V_user_V_U;
    delete regslice_both_m_axis_video_V_last_V_U;
    delete regslice_both_m_axis_video_V_id_V_U;
    delete regslice_both_m_axis_video_V_dest_V_U;
}

void incrust_score::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void incrust_score::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_reg_232 = select_ln23_3_fu_421_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        i_0_reg_232 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_reg_221 = add_ln23_fu_367_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        indvar_flatten_reg_221 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        j_0_reg_254 = j_fu_521_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        j_0_reg_254 = ap_const_lv31_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        pixel_1_reg_243 = pixel_2_fu_507_p3.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        pixel_1_reg_243 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        add_ln31_1_reg_590 = add_ln31_1_fu_271_p2.read();
        add_ln31_reg_585 = add_ln31_fu_265_p2.read();
        and_ln35_reg_601 = and_ln35_fu_301_p2.read();
        and_ln38_reg_606 = and_ln38_fu_319_p2.read();
        bound_reg_611 = bound_fu_333_p2.read();
        icmp_ln32_reg_596 = icmp_ln32_fu_277_p2.read();
        start_x_read_reg_575 = start_x.read();
        start_y_read_reg_569 = start_y.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        and_ln31_reg_665 = and_ln31_fu_487_p2.read();
        empty_reg_630_0 = s_axis_video_TDATA_int.read();
        tmp_dest_V_reg_660 = s_axis_video_TDEST_int.read();
        tmp_id_V_reg_655 = s_axis_video_TID_int.read();
        tmp_keep_V_reg_635 = s_axis_video_TKEEP_int.read();
        tmp_last_V_reg_650 = s_axis_video_TLAST_int.read();
        tmp_strb_V_reg_640 = s_axis_video_TSTRB_int.read();
        tmp_user_V_reg_645 = s_axis_video_TUSER_int.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln23_reg_616 = icmp_ln23_fu_362_p2.read();
        icmp_ln23_reg_616_pp0_iter1_reg = icmp_ln23_reg_616.read();
    }
}

void incrust_score::thread_add_ln23_1_fu_373_p2() {
    add_ln23_1_fu_373_p2 = (!i_0_reg_232.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_0_reg_232.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void incrust_score::thread_add_ln23_fu_367_p2() {
    add_ln23_fu_367_p2 = (!indvar_flatten_reg_221.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(indvar_flatten_reg_221.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void incrust_score::thread_add_ln26_fu_515_p2() {
    add_ln26_fu_515_p2 = (!j_0_reg_254.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(j_0_reg_254.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void incrust_score::thread_add_ln31_1_fu_271_p2() {
    add_ln31_1_fu_271_p2 = (!start_y.read().is_01() || !ap_const_lv32_32.is_01())? sc_lv<32>(): (sc_biguint<32>(start_y.read()) + sc_biguint<32>(ap_const_lv32_32));
}

void incrust_score::thread_add_ln31_fu_265_p2() {
    add_ln31_fu_265_p2 = (!start_x.read().is_01() || !ap_const_lv32_32.is_01())? sc_lv<32>(): (sc_biguint<32>(start_x.read()) + sc_biguint<32>(ap_const_lv32_32));
}

void incrust_score::thread_and_ln31_fu_487_p2() {
    and_ln31_fu_487_p2 = (select_ln23_1_fu_401_p3.read() & xor_ln31_fu_481_p2.read());
}

void incrust_score::thread_and_ln35_fu_301_p2() {
    and_ln35_fu_301_p2 = (icmp_ln35_fu_283_p2.read() & xor_ln32_fu_295_p2.read());
}

void incrust_score::thread_and_ln38_fu_319_p2() {
    and_ln38_fu_319_p2 = (icmp_ln38_fu_289_p2.read() & xor_ln35_fu_313_p2.read());
}

void incrust_score::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void incrust_score::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void incrust_score::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void incrust_score::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void incrust_score::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()));
}

void incrust_score::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())));
}

void incrust_score::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read())));
}

void incrust_score::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, s_axis_video_TVALID_int.read()));
}

void incrust_score::thread_ap_block_state3_io() {
    ap_block_state3_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_reg_616.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY_int.read()));
}

void incrust_score::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void incrust_score::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_reg_616_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axis_video_TREADY_int.read()));
}

void incrust_score::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void incrust_score::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void incrust_score::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void incrust_score::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void incrust_score::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void incrust_score::thread_bound_fu_333_p0() {
    bound_fu_333_p0 =  (sc_lv<32>) (bound_fu_333_p00.read());
}

void incrust_score::thread_bound_fu_333_p00() {
    bound_fu_333_p00 = esl_zext<64,32>(hsize_in.read());
}

void incrust_score::thread_bound_fu_333_p1() {
    bound_fu_333_p1 =  (sc_lv<32>) (bound_fu_333_p10.read());
}

void incrust_score::thread_bound_fu_333_p10() {
    bound_fu_333_p10 = esl_zext<64,32>(vsize_in.read());
}

void incrust_score::thread_bound_fu_333_p2() {
    bound_fu_333_p2 = (!bound_fu_333_p0.read().is_01() || !bound_fu_333_p1.read().is_01())? sc_lv<64>(): sc_biguint<32>(bound_fu_333_p0.read()) * sc_biguint<32>(bound_fu_333_p1.read());
}

void incrust_score::thread_icmp_ln23_fu_362_p2() {
    icmp_ln23_fu_362_p2 = (!indvar_flatten_reg_221.read().is_01() || !bound_reg_611.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_221.read() == bound_reg_611.read());
}

void incrust_score::thread_icmp_ln26_fu_357_p2() {
    icmp_ln26_fu_357_p2 = (!zext_ln26_fu_353_p1.read().is_01() || !hsize_in.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln26_fu_353_p1.read()) < sc_bigint<32>(hsize_in.read()));
}

void incrust_score::thread_icmp_ln31_1_fu_348_p2() {
    icmp_ln31_1_fu_348_p2 = (!zext_ln23_1_fu_339_p1.read().is_01() || !add_ln31_1_reg_590.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln23_1_fu_339_p1.read()) < sc_bigint<32>(add_ln31_1_reg_590.read()));
}

void incrust_score::thread_icmp_ln31_2_fu_453_p2() {
    icmp_ln31_2_fu_453_p2 = (!zext_ln23_2_fu_417_p1.read().is_01() || !start_x_read_reg_575.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln23_2_fu_417_p1.read()) < sc_bigint<32>(start_x_read_reg_575.read()));
}

void incrust_score::thread_icmp_ln31_3_fu_383_p2() {
    icmp_ln31_3_fu_383_p2 = (!zext_ln23_fu_379_p1.read().is_01() || !start_y_read_reg_569.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln23_fu_379_p1.read()) < sc_bigint<32>(start_y_read_reg_569.read()));
}

void incrust_score::thread_icmp_ln31_4_fu_396_p2() {
    icmp_ln31_4_fu_396_p2 = (!zext_ln23_fu_379_p1.read().is_01() || !add_ln31_1_reg_590.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln23_fu_379_p1.read()) < sc_bigint<32>(add_ln31_1_reg_590.read()));
}

void incrust_score::thread_icmp_ln31_5_fu_458_p2() {
    icmp_ln31_5_fu_458_p2 = (!zext_ln23_2_fu_417_p1.read().is_01() || !add_ln31_reg_585.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln23_2_fu_417_p1.read()) < sc_bigint<32>(add_ln31_reg_585.read()));
}

void incrust_score::thread_icmp_ln31_fu_343_p2() {
    icmp_ln31_fu_343_p2 = (!zext_ln23_1_fu_339_p1.read().is_01() || !start_y_read_reg_569.read().is_01())? sc_lv<1>(): (sc_bigint<32>(zext_ln23_1_fu_339_p1.read()) < sc_bigint<32>(start_y_read_reg_569.read()));
}

void incrust_score::thread_icmp_ln32_fu_277_p2() {
    icmp_ln32_fu_277_p2 = (!mode.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(mode.read() == ap_const_lv32_1);
}

void incrust_score::thread_icmp_ln35_fu_283_p2() {
    icmp_ln35_fu_283_p2 = (!mode.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(mode.read() == ap_const_lv32_2);
}

void incrust_score::thread_icmp_ln38_fu_289_p2() {
    icmp_ln38_fu_289_p2 = (!mode.read().is_01() || !ap_const_lv32_3.is_01())? sc_lv<1>(): sc_lv<1>(mode.read() == ap_const_lv32_3);
}

void incrust_score::thread_im_0_V_address0() {
    im_0_V_address0 =  (sc_lv<12>) (sext_ln33_fu_493_p1.read());
}

void incrust_score::thread_im_0_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        im_0_V_ce0 = ap_const_logic_1;
    } else {
        im_0_V_ce0 = ap_const_logic_0;
    }
}

void incrust_score::thread_im_1_V_address0() {
    im_1_V_address0 =  (sc_lv<12>) (sext_ln33_fu_493_p1.read());
}

void incrust_score::thread_im_1_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        im_1_V_ce0 = ap_const_logic_1;
    } else {
        im_1_V_ce0 = ap_const_logic_0;
    }
}

void incrust_score::thread_im_2_V_address0() {
    im_2_V_address0 =  (sc_lv<12>) (sext_ln33_fu_493_p1.read());
}

void incrust_score::thread_im_2_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        im_2_V_ce0 = ap_const_logic_1;
    } else {
        im_2_V_ce0 = ap_const_logic_0;
    }
}

void incrust_score::thread_im_3_V_address0() {
    im_3_V_address0 =  (sc_lv<12>) (sext_ln33_fu_493_p1.read());
}

void incrust_score::thread_im_3_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        im_3_V_ce0 = ap_const_logic_1;
    } else {
        im_3_V_ce0 = ap_const_logic_0;
    }
}

void incrust_score::thread_j_fu_521_p3() {
    j_fu_521_p3 = (!icmp_ln26_fu_357_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln26_fu_357_p2.read()[0].to_bool())? add_ln26_fu_515_p2.read(): ap_const_lv31_1);
}

void incrust_score::thread_m_axis_video_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_reg_616.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_reg_616_pp0_iter1_reg.read())))) {
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int.read();
    } else {
        m_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void incrust_score::thread_m_axis_video_TDATA_int() {
    m_axis_video_TDATA_int = (!and_ln31_reg_665.read()[0].is_01())? sc_lv<24>(): ((and_ln31_reg_665.read()[0].to_bool())? zext_ln38_fu_557_p1.read(): empty_reg_630_0.read());
}

void incrust_score::thread_m_axis_video_TVALID() {
    m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out.read();
}

void incrust_score::thread_m_axis_video_TVALID_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln23_reg_616.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axis_video_TVALID_int = ap_const_logic_1;
    } else {
        m_axis_video_TVALID_int = ap_const_logic_0;
    }
}

void incrust_score::thread_or_ln31_1_fu_475_p2() {
    or_ln31_1_fu_475_p2 = (or_ln31_fu_469_p2.read() | xor_ln31_1_fu_463_p2.read());
}

void incrust_score::thread_or_ln31_fu_469_p2() {
    or_ln31_fu_469_p2 = (icmp_ln31_2_fu_453_p2.read() | select_ln23_fu_388_p3.read());
}

void incrust_score::thread_or_ln35_fu_307_p2() {
    or_ln35_fu_307_p2 = (icmp_ln32_fu_277_p2.read() | icmp_ln35_fu_283_p2.read());
}

void incrust_score::thread_pixel_2_fu_507_p3() {
    pixel_2_fu_507_p3 = (!and_ln31_fu_487_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln31_fu_487_p2.read()[0].to_bool())? pixel_fu_501_p2.read(): pixel_1_reg_243.read());
}

void incrust_score::thread_pixel_fu_501_p2() {
    pixel_fu_501_p2 = (!pixel_1_reg_243.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(pixel_1_reg_243.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void incrust_score::thread_s_axis_video_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0))) {
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int.read();
    } else {
        s_axis_video_TDATA_blk_n = ap_const_logic_1;
    }
}

void incrust_score::thread_s_axis_video_TREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, s_axis_video_TVALID.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, regslice_both_s_axis_video_V_data_V_U_ack_in.read()))) {
        s_axis_video_TREADY = ap_const_logic_1;
    } else {
        s_axis_video_TREADY = ap_const_logic_0;
    }
}

void incrust_score::thread_s_axis_video_TREADY_int() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        s_axis_video_TREADY_int = ap_const_logic_1;
    } else {
        s_axis_video_TREADY_int = ap_const_logic_0;
    }
}

void incrust_score::thread_select_ln23_1_fu_401_p3() {
    select_ln23_1_fu_401_p3 = (!icmp_ln26_fu_357_p2.read()[0].is_01())? sc_lv<1>(): ((icmp_ln26_fu_357_p2.read()[0].to_bool())? icmp_ln31_1_fu_348_p2.read(): icmp_ln31_4_fu_396_p2.read());
}

void incrust_score::thread_select_ln23_2_fu_409_p3() {
    select_ln23_2_fu_409_p3 = (!icmp_ln26_fu_357_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln26_fu_357_p2.read()[0].to_bool())? j_0_reg_254.read(): ap_const_lv31_0);
}

void incrust_score::thread_select_ln23_3_fu_421_p3() {
    select_ln23_3_fu_421_p3 = (!icmp_ln26_fu_357_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln26_fu_357_p2.read()[0].to_bool())? i_0_reg_232.read(): add_ln23_1_fu_373_p2.read());
}

void incrust_score::thread_select_ln23_fu_388_p3() {
    select_ln23_fu_388_p3 = (!icmp_ln26_fu_357_p2.read()[0].is_01())? sc_lv<1>(): ((icmp_ln26_fu_357_p2.read()[0].to_bool())? icmp_ln31_fu_343_p2.read(): icmp_ln31_3_fu_383_p2.read());
}

void incrust_score::thread_select_ln32_fu_532_p3() {
    select_ln32_fu_532_p3 = (!icmp_ln32_reg_596.read()[0].is_01())? sc_lv<17>(): ((icmp_ln32_reg_596.read()[0].to_bool())? im_1_V_q0.read(): im_0_V_q0.read());
}

void incrust_score::thread_select_ln35_fu_539_p3() {
    select_ln35_fu_539_p3 = (!and_ln35_reg_601.read()[0].is_01())? sc_lv<17>(): ((and_ln35_reg_601.read()[0].to_bool())? im_2_V_q0.read(): select_ln32_fu_532_p3.read());
}

void incrust_score::thread_sext_ln33_fu_493_p1() {
    sext_ln33_fu_493_p1 = esl_sext<64,32>(pixel_1_reg_243.read());
}

void incrust_score::thread_sext_ln38_fu_553_p1() {
    sext_ln38_fu_553_p1 = esl_sext<23,17>(video_data_V_1_fu_546_p3.read());
}

void incrust_score::thread_video_data_V_1_fu_546_p3() {
    video_data_V_1_fu_546_p3 = (!and_ln38_reg_606.read()[0].is_01())? sc_lv<17>(): ((and_ln38_reg_606.read()[0].to_bool())? im_3_V_q0.read(): select_ln35_fu_539_p3.read());
}

void incrust_score::thread_xor_ln31_1_fu_463_p2() {
    xor_ln31_1_fu_463_p2 = (icmp_ln31_5_fu_458_p2.read() ^ ap_const_lv1_1);
}

void incrust_score::thread_xor_ln31_fu_481_p2() {
    xor_ln31_fu_481_p2 = (or_ln31_1_fu_475_p2.read() ^ ap_const_lv1_1);
}

void incrust_score::thread_xor_ln32_fu_295_p2() {
    xor_ln32_fu_295_p2 = (icmp_ln32_fu_277_p2.read() ^ ap_const_lv1_1);
}

void incrust_score::thread_xor_ln35_fu_313_p2() {
    xor_ln35_fu_313_p2 = (or_ln35_fu_307_p2.read() ^ ap_const_lv1_1);
}

void incrust_score::thread_zext_ln23_1_fu_339_p1() {
    zext_ln23_1_fu_339_p1 = esl_zext<32,31>(i_0_reg_232.read());
}

void incrust_score::thread_zext_ln23_2_fu_417_p1() {
    zext_ln23_2_fu_417_p1 = esl_zext<32,31>(select_ln23_2_fu_409_p3.read());
}

void incrust_score::thread_zext_ln23_fu_379_p1() {
    zext_ln23_fu_379_p1 = esl_zext<32,31>(add_ln23_1_fu_373_p2.read());
}

void incrust_score::thread_zext_ln26_fu_353_p1() {
    zext_ln26_fu_353_p1 = esl_zext<32,31>(j_0_reg_254.read());
}

void incrust_score::thread_zext_ln38_fu_557_p1() {
    zext_ln38_fu_557_p1 = esl_zext<24,23>(sext_ln38_fu_553_p1.read());
}

void incrust_score::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln23_fu_362_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(regslice_both_m_axis_video_V_data_V_U_apdone_blk.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void incrust_score::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDATA\" :  \"" << s_axis_video_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TVALID\" :  \"" << s_axis_video_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axis_video_TREADY\" :  \"" << s_axis_video_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TKEEP\" :  \"" << s_axis_video_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TSTRB\" :  \"" << s_axis_video_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TUSER\" :  \"" << s_axis_video_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TLAST\" :  \"" << s_axis_video_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TID\" :  \"" << s_axis_video_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_video_TDEST\" :  \"" << s_axis_video_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDATA\" :  \"" << m_axis_video_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TVALID\" :  \"" << m_axis_video_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axis_video_TREADY\" :  \"" << m_axis_video_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TKEEP\" :  \"" << m_axis_video_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TSTRB\" :  \"" << m_axis_video_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TUSER\" :  \"" << m_axis_video_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TLAST\" :  \"" << m_axis_video_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TID\" :  \"" << m_axis_video_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axis_video_TDEST\" :  \"" << m_axis_video_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"hsize_in\" :  \"" << hsize_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsize_in\" :  \"" << vsize_in.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

