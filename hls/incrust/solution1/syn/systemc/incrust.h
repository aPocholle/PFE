// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _incrust_HH_
#define _incrust_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "incrust_im_esirem_V.h"
#include "incrust_im_polytebkb.h"
#include "incrust_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct incrust : public sc_module {
    // Port declarations 39
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<24> > s_axis_video_TDATA;
    sc_in< sc_logic > s_axis_video_TVALID;
    sc_out< sc_logic > s_axis_video_TREADY;
    sc_in< sc_lv<3> > s_axis_video_TKEEP;
    sc_in< sc_lv<3> > s_axis_video_TSTRB;
    sc_in< sc_lv<1> > s_axis_video_TUSER;
    sc_in< sc_lv<1> > s_axis_video_TLAST;
    sc_in< sc_lv<1> > s_axis_video_TID;
    sc_in< sc_lv<1> > s_axis_video_TDEST;
    sc_out< sc_lv<24> > m_axis_video_TDATA;
    sc_out< sc_logic > m_axis_video_TVALID;
    sc_in< sc_logic > m_axis_video_TREADY;
    sc_out< sc_lv<3> > m_axis_video_TKEEP;
    sc_out< sc_lv<3> > m_axis_video_TSTRB;
    sc_out< sc_lv<1> > m_axis_video_TUSER;
    sc_out< sc_lv<1> > m_axis_video_TLAST;
    sc_out< sc_lv<1> > m_axis_video_TID;
    sc_out< sc_lv<1> > m_axis_video_TDEST;
    sc_in< sc_lv<32> > hsize_in;
    sc_in< sc_lv<32> > vsize_in;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    incrust(sc_module_name name);
    SC_HAS_PROCESS(incrust);

    ~incrust();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    incrust_im_esirem_V* im_esirem_V_U;
    incrust_im_polytebkb* im_polytech_V_U;
    incrust_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* incrust_AXILiteS_s_axi_U;
    regslice_both<24>* regslice_both_s_axis_video_V_data_V_U;
    regslice_both<3>* regslice_both_s_axis_video_V_keep_V_U;
    regslice_both<3>* regslice_both_s_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_s_axis_video_V_dest_V_U;
    regslice_both<24>* regslice_both_m_axis_video_V_data_V_U;
    regslice_both<3>* regslice_both_m_axis_video_V_keep_V_U;
    regslice_both<3>* regslice_both_m_axis_video_V_strb_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_user_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_last_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_id_V_U;
    regslice_both<1>* regslice_both_m_axis_video_V_dest_V_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > start_x;
    sc_signal< sc_lv<32> > start_y;
    sc_signal< sc_lv<15> > im_esirem_V_address0;
    sc_signal< sc_logic > im_esirem_V_ce0;
    sc_signal< sc_lv<24> > im_esirem_V_q0;
    sc_signal< sc_lv<15> > im_polytech_V_address0;
    sc_signal< sc_logic > im_polytech_V_ce0;
    sc_signal< sc_lv<24> > im_polytech_V_q0;
    sc_signal< sc_logic > s_axis_video_TDATA_blk_n;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln20_fu_336_p2;
    sc_signal< sc_logic > m_axis_video_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln20_reg_561;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln20_reg_561_pp0_iter1_reg;
    sc_signal< sc_lv<64> > indvar_flatten_reg_187;
    sc_signal< sc_lv<31> > i_0_reg_198;
    sc_signal< sc_lv<32> > pixel_1_reg_209;
    sc_signal< sc_lv<31> > j_0_reg_220;
    sc_signal< sc_lv<32> > start_y_read_reg_524;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > start_x_read_reg_530;
    sc_signal< sc_lv<32> > add_ln28_fu_231_p2;
    sc_signal< sc_lv<32> > add_ln28_reg_540;
    sc_signal< sc_lv<32> > add_ln28_1_fu_237_p2;
    sc_signal< sc_lv<32> > add_ln28_1_reg_545;
    sc_signal< sc_lv<32> > select_ln29_fu_291_p3;
    sc_signal< sc_lv<32> > select_ln29_reg_551;
    sc_signal< sc_lv<64> > bound_fu_307_p2;
    sc_signal< sc_lv<64> > bound_reg_556;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_io;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<64> > add_ln20_fu_341_p2;
    sc_signal< sc_lv<31> > select_ln20_3_fu_395_p3;
    sc_signal< sc_lv<24> > empty_reg_575_0;
    sc_signal< sc_lv<3> > tmp_keep_V_reg_580;
    sc_signal< sc_lv<3> > tmp_strb_V_reg_585;
    sc_signal< sc_lv<1> > tmp_user_V_reg_590;
    sc_signal< sc_lv<1> > tmp_last_V_reg_595;
    sc_signal< sc_lv<1> > tmp_id_V_reg_600;
    sc_signal< sc_lv<1> > tmp_dest_V_reg_605;
    sc_signal< sc_lv<1> > and_ln28_fu_461_p2;
    sc_signal< sc_lv<1> > and_ln28_reg_610;
    sc_signal< sc_lv<1> > icmp_ln29_fu_467_p2;
    sc_signal< sc_lv<1> > icmp_ln29_reg_615;
    sc_signal< sc_lv<32> > pixel_2_fu_484_p3;
    sc_signal< sc_lv<31> > j_fu_498_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<64> > sext_ln30_fu_472_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > sub_ln29_fu_251_p2;
    sc_signal< sc_lv<31> > lshr_ln29_1_fu_257_p4;
    sc_signal< sc_lv<32> > zext_ln29_fu_267_p1;
    sc_signal< sc_lv<31> > lshr_ln29_2_fu_277_p4;
    sc_signal< sc_lv<1> > tmp_fu_243_p3;
    sc_signal< sc_lv<32> > sub_ln29_1_fu_271_p2;
    sc_signal< sc_lv<32> > zext_ln29_1_fu_287_p1;
    sc_signal< sc_lv<32> > bound_fu_307_p0;
    sc_signal< sc_lv<32> > bound_fu_307_p1;
    sc_signal< sc_lv<32> > zext_ln20_1_fu_313_p1;
    sc_signal< sc_lv<32> > zext_ln23_fu_327_p1;
    sc_signal< sc_lv<31> > add_ln20_1_fu_347_p2;
    sc_signal< sc_lv<32> > zext_ln20_fu_353_p1;
    sc_signal< sc_lv<1> > icmp_ln23_fu_331_p2;
    sc_signal< sc_lv<1> > icmp_ln28_fu_317_p2;
    sc_signal< sc_lv<1> > icmp_ln28_3_fu_357_p2;
    sc_signal< sc_lv<1> > icmp_ln28_1_fu_322_p2;
    sc_signal< sc_lv<1> > icmp_ln28_4_fu_370_p2;
    sc_signal< sc_lv<31> > select_ln20_2_fu_383_p3;
    sc_signal< sc_lv<32> > zext_ln20_2_fu_391_p1;
    sc_signal< sc_lv<1> > icmp_ln28_5_fu_432_p2;
    sc_signal< sc_lv<1> > icmp_ln28_2_fu_427_p2;
    sc_signal< sc_lv<1> > select_ln20_fu_362_p3;
    sc_signal< sc_lv<1> > or_ln28_fu_443_p2;
    sc_signal< sc_lv<1> > xor_ln28_1_fu_437_p2;
    sc_signal< sc_lv<1> > or_ln28_1_fu_449_p2;
    sc_signal< sc_lv<1> > select_ln20_1_fu_375_p3;
    sc_signal< sc_lv<1> > xor_ln28_fu_455_p2;
    sc_signal< sc_lv<32> > pixel_fu_478_p2;
    sc_signal< sc_lv<31> > add_ln23_fu_492_p2;
    sc_signal< sc_lv<24> > video_data_V_1_fu_509_p3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_data_V_U_apdone_blk;
    sc_signal< sc_lv<24> > s_axis_video_TDATA_int;
    sc_signal< sc_logic > s_axis_video_TVALID_int;
    sc_signal< sc_logic > s_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_data_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_lv<3> > s_axis_video_TKEEP_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_keep_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_lv<3> > s_axis_video_TSTRB_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_strb_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TUSER_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_user_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TLAST_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_last_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TID_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_id_V_U_ack_in;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_lv<1> > s_axis_video_TDEST_int;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_dest_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_s_axis_video_V_dest_V_U_ack_in;
    sc_signal< sc_lv<24> > m_axis_video_TDATA_int;
    sc_signal< sc_logic > m_axis_video_TVALID_int;
    sc_signal< sc_logic > m_axis_video_TREADY_int;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_data_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_keep_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_strb_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_user_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_last_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_id_V_U_vld_out;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
    sc_signal< sc_logic > regslice_both_m_axis_video_V_dest_V_U_vld_out;
    sc_signal< sc_lv<64> > bound_fu_307_p00;
    sc_signal< sc_lv<64> > bound_fu_307_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<32> ap_const_lv32_FA;
    static const sc_lv<32> ap_const_lv32_53;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln20_1_fu_347_p2();
    void thread_add_ln20_fu_341_p2();
    void thread_add_ln23_fu_492_p2();
    void thread_add_ln28_1_fu_237_p2();
    void thread_add_ln28_fu_231_p2();
    void thread_and_ln28_fu_461_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_io();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_bound_fu_307_p0();
    void thread_bound_fu_307_p00();
    void thread_bound_fu_307_p1();
    void thread_bound_fu_307_p10();
    void thread_bound_fu_307_p2();
    void thread_icmp_ln20_fu_336_p2();
    void thread_icmp_ln23_fu_331_p2();
    void thread_icmp_ln28_1_fu_322_p2();
    void thread_icmp_ln28_2_fu_427_p2();
    void thread_icmp_ln28_3_fu_357_p2();
    void thread_icmp_ln28_4_fu_370_p2();
    void thread_icmp_ln28_5_fu_432_p2();
    void thread_icmp_ln28_fu_317_p2();
    void thread_icmp_ln29_fu_467_p2();
    void thread_im_esirem_V_address0();
    void thread_im_esirem_V_ce0();
    void thread_im_polytech_V_address0();
    void thread_im_polytech_V_ce0();
    void thread_j_fu_498_p3();
    void thread_lshr_ln29_1_fu_257_p4();
    void thread_lshr_ln29_2_fu_277_p4();
    void thread_m_axis_video_TDATA_blk_n();
    void thread_m_axis_video_TDATA_int();
    void thread_m_axis_video_TVALID();
    void thread_m_axis_video_TVALID_int();
    void thread_or_ln28_1_fu_449_p2();
    void thread_or_ln28_fu_443_p2();
    void thread_pixel_2_fu_484_p3();
    void thread_pixel_fu_478_p2();
    void thread_s_axis_video_TDATA_blk_n();
    void thread_s_axis_video_TREADY();
    void thread_s_axis_video_TREADY_int();
    void thread_select_ln20_1_fu_375_p3();
    void thread_select_ln20_2_fu_383_p3();
    void thread_select_ln20_3_fu_395_p3();
    void thread_select_ln20_fu_362_p3();
    void thread_select_ln29_fu_291_p3();
    void thread_sext_ln30_fu_472_p1();
    void thread_sub_ln29_1_fu_271_p2();
    void thread_sub_ln29_fu_251_p2();
    void thread_tmp_fu_243_p3();
    void thread_video_data_V_1_fu_509_p3();
    void thread_xor_ln28_1_fu_437_p2();
    void thread_xor_ln28_fu_455_p2();
    void thread_zext_ln20_1_fu_313_p1();
    void thread_zext_ln20_2_fu_391_p1();
    void thread_zext_ln20_fu_353_p1();
    void thread_zext_ln23_fu_327_p1();
    void thread_zext_ln29_1_fu_287_p1();
    void thread_zext_ln29_fu_267_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
