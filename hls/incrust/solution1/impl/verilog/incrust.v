// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="incrust,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=96,HLS_SYN_DSP=4,HLS_SYN_FF=532,HLS_SYN_LUT=1029,HLS_VERSION=2019_2}" *)

module incrust (
        ap_clk,
        ap_rst_n,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        hsize_in,
        vsize_in,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [2:0] s_axis_video_TKEEP;
input  [2:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input  [31:0] hsize_in;
input  [31:0] vsize_in;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

reg s_axis_video_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] start_x;
wire   [31:0] start_y;
wire   [14:0] im_esirem_V_address0;
reg    im_esirem_V_ce0;
wire   [23:0] im_esirem_V_q0;
wire   [14:0] im_polytech_V_address0;
reg    im_polytech_V_ce0;
wire   [23:0] im_polytech_V_q0;
reg    s_axis_video_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln20_fu_336_p2;
reg    m_axis_video_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln20_reg_561;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln20_reg_561_pp0_iter1_reg;
reg   [63:0] indvar_flatten_reg_187;
reg   [30:0] i_0_reg_198;
reg  signed [31:0] pixel_1_reg_209;
reg   [30:0] j_0_reg_220;
reg   [31:0] start_y_read_reg_524;
wire    ap_CS_fsm_state1;
reg   [31:0] start_x_read_reg_530;
wire   [31:0] add_ln28_fu_231_p2;
reg   [31:0] add_ln28_reg_540;
wire   [31:0] add_ln28_1_fu_237_p2;
reg   [31:0] add_ln28_1_reg_545;
wire   [31:0] select_ln29_fu_291_p3;
reg   [31:0] select_ln29_reg_551;
wire   [63:0] bound_fu_307_p2;
reg   [63:0] bound_reg_556;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] add_ln20_fu_341_p2;
wire   [30:0] select_ln20_3_fu_395_p3;
reg   [23:0] empty_reg_575_0;
reg   [2:0] tmp_keep_V_reg_580;
reg   [2:0] tmp_strb_V_reg_585;
reg   [0:0] tmp_user_V_reg_590;
reg   [0:0] tmp_last_V_reg_595;
reg   [0:0] tmp_id_V_reg_600;
reg   [0:0] tmp_dest_V_reg_605;
wire   [0:0] and_ln28_fu_461_p2;
reg   [0:0] and_ln28_reg_610;
wire   [0:0] icmp_ln29_fu_467_p2;
reg   [0:0] icmp_ln29_reg_615;
wire   [31:0] pixel_2_fu_484_p3;
wire   [30:0] j_fu_498_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire  signed [63:0] sext_ln30_fu_472_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] sub_ln29_fu_251_p2;
wire   [30:0] lshr_ln29_1_fu_257_p4;
wire   [31:0] zext_ln29_fu_267_p1;
wire   [30:0] lshr_ln29_2_fu_277_p4;
wire   [0:0] tmp_fu_243_p3;
wire   [31:0] sub_ln29_1_fu_271_p2;
wire   [31:0] zext_ln29_1_fu_287_p1;
wire   [31:0] bound_fu_307_p0;
wire   [31:0] bound_fu_307_p1;
wire   [31:0] zext_ln20_1_fu_313_p1;
wire   [31:0] zext_ln23_fu_327_p1;
wire   [30:0] add_ln20_1_fu_347_p2;
wire   [31:0] zext_ln20_fu_353_p1;
wire   [0:0] icmp_ln23_fu_331_p2;
wire   [0:0] icmp_ln28_fu_317_p2;
wire   [0:0] icmp_ln28_3_fu_357_p2;
wire   [0:0] icmp_ln28_1_fu_322_p2;
wire   [0:0] icmp_ln28_4_fu_370_p2;
wire   [30:0] select_ln20_2_fu_383_p3;
wire   [31:0] zext_ln20_2_fu_391_p1;
wire   [0:0] icmp_ln28_5_fu_432_p2;
wire   [0:0] icmp_ln28_2_fu_427_p2;
wire   [0:0] select_ln20_fu_362_p3;
wire   [0:0] or_ln28_fu_443_p2;
wire   [0:0] xor_ln28_1_fu_437_p2;
wire   [0:0] or_ln28_1_fu_449_p2;
wire   [0:0] select_ln20_1_fu_375_p3;
wire   [0:0] xor_ln28_fu_455_p2;
wire   [31:0] pixel_fu_478_p2;
wire   [30:0] add_ln23_fu_492_p2;
wire   [23:0] video_data_V_1_fu_509_p3;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state5;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_s_axis_video_V_data_V_U_apdone_blk;
wire   [23:0] s_axis_video_TDATA_int;
wire    s_axis_video_TVALID_int;
reg    s_axis_video_TREADY_int;
wire    regslice_both_s_axis_video_V_data_V_U_ack_in;
wire    regslice_both_s_axis_video_V_keep_V_U_apdone_blk;
wire   [2:0] s_axis_video_TKEEP_int;
wire    regslice_both_s_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_s_axis_video_V_keep_V_U_ack_in;
wire    regslice_both_s_axis_video_V_strb_V_U_apdone_blk;
wire   [2:0] s_axis_video_TSTRB_int;
wire    regslice_both_s_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_s_axis_video_V_strb_V_U_ack_in;
wire    regslice_both_s_axis_video_V_user_V_U_apdone_blk;
wire   [0:0] s_axis_video_TUSER_int;
wire    regslice_both_s_axis_video_V_user_V_U_vld_out;
wire    regslice_both_s_axis_video_V_user_V_U_ack_in;
wire    regslice_both_s_axis_video_V_last_V_U_apdone_blk;
wire   [0:0] s_axis_video_TLAST_int;
wire    regslice_both_s_axis_video_V_last_V_U_vld_out;
wire    regslice_both_s_axis_video_V_last_V_U_ack_in;
wire    regslice_both_s_axis_video_V_id_V_U_apdone_blk;
wire   [0:0] s_axis_video_TID_int;
wire    regslice_both_s_axis_video_V_id_V_U_vld_out;
wire    regslice_both_s_axis_video_V_id_V_U_ack_in;
wire    regslice_both_s_axis_video_V_dest_V_U_apdone_blk;
wire   [0:0] s_axis_video_TDEST_int;
wire    regslice_both_s_axis_video_V_dest_V_U_vld_out;
wire    regslice_both_s_axis_video_V_dest_V_U_ack_in;
wire   [23:0] m_axis_video_TDATA_int;
reg    m_axis_video_TVALID_int;
wire    m_axis_video_TREADY_int;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [63:0] bound_fu_307_p00;
wire   [63:0] bound_fu_307_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

incrust_im_esirem_V #(
    .DataWidth( 24 ),
    .AddressRange( 20750 ),
    .AddressWidth( 15 ))
im_esirem_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(im_esirem_V_address0),
    .ce0(im_esirem_V_ce0),
    .q0(im_esirem_V_q0)
);

incrust_im_polytebkb #(
    .DataWidth( 24 ),
    .AddressRange( 20750 ),
    .AddressWidth( 15 ))
im_polytech_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(im_polytech_V_address0),
    .ce0(im_polytech_V_ce0),
    .q0(im_polytech_V_q0)
);

incrust_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
incrust_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .start_x(start_x),
    .start_y(start_y)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_s_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDATA),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_data_V_U_ack_in),
    .data_out(s_axis_video_TDATA_int),
    .vld_out(s_axis_video_TVALID_int),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TKEEP),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_keep_V_U_ack_in),
    .data_out(s_axis_video_TKEEP_int),
    .vld_out(regslice_both_s_axis_video_V_keep_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_s_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TSTRB),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_strb_V_U_ack_in),
    .data_out(s_axis_video_TSTRB_int),
    .vld_out(regslice_both_s_axis_video_V_strb_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TUSER),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_user_V_U_ack_in),
    .data_out(s_axis_video_TUSER_int),
    .vld_out(regslice_both_s_axis_video_V_user_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TLAST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_last_V_U_ack_in),
    .data_out(s_axis_video_TLAST_int),
    .vld_out(regslice_both_s_axis_video_V_last_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TID),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_id_V_U_ack_in),
    .data_out(s_axis_video_TID_int),
    .vld_out(regslice_both_s_axis_video_V_id_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_s_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(s_axis_video_TDEST),
    .vld_in(s_axis_video_TVALID),
    .ack_in(regslice_both_s_axis_video_V_dest_V_U_ack_in),
    .data_out(s_axis_video_TDEST_int),
    .vld_out(regslice_both_s_axis_video_V_dest_V_U_vld_out),
    .ack_out(s_axis_video_TREADY_int),
    .apdone_blk(regslice_both_s_axis_video_V_dest_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 24 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(m_axis_video_TDATA_int),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(m_axis_video_TREADY_int),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_keep_V_reg_580),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 3 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_strb_V_reg_585),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_user_V_reg_590),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_last_V_reg_595),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_id_V_reg_600),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(tmp_dest_V_reg_605),
    .vld_in(m_axis_video_TVALID_int),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_198 <= select_ln20_3_fu_395_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_0_reg_198 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_187 <= add_ln20_fu_341_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        indvar_flatten_reg_187 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_220 <= j_fu_498_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        j_0_reg_220 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        pixel_1_reg_209 <= pixel_2_fu_484_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        pixel_1_reg_209 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        add_ln28_1_reg_545 <= add_ln28_1_fu_237_p2;
        add_ln28_reg_540 <= add_ln28_fu_231_p2;
        bound_reg_556 <= bound_fu_307_p2;
        select_ln29_reg_551 <= select_ln29_fu_291_p3;
        start_x_read_reg_530 <= start_x;
        start_y_read_reg_524 <= start_y;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_336_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln28_reg_610 <= and_ln28_fu_461_p2;
        empty_reg_575_0 <= s_axis_video_TDATA_int;
        icmp_ln29_reg_615 <= icmp_ln29_fu_467_p2;
        tmp_dest_V_reg_605 <= s_axis_video_TDEST_int;
        tmp_id_V_reg_600 <= s_axis_video_TID_int;
        tmp_keep_V_reg_580 <= s_axis_video_TKEEP_int;
        tmp_last_V_reg_595 <= s_axis_video_TLAST_int;
        tmp_strb_V_reg_585 <= s_axis_video_TSTRB_int;
        tmp_user_V_reg_590 <= s_axis_video_TUSER_int;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_reg_561 <= icmp_ln20_fu_336_p2;
        icmp_ln20_reg_561_pp0_iter1_reg <= icmp_ln20_reg_561;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_336_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        im_esirem_V_ce0 = 1'b1;
    end else begin
        im_esirem_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        im_polytech_V_ce0 = 1'b1;
    end else begin
        im_polytech_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln20_reg_561_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln20_reg_561 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_TREADY_int;
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_561 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axis_video_TVALID_int = 1'b1;
    end else begin
        m_axis_video_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_336_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_TVALID_int;
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_s_axis_video_V_data_V_U_ack_in == 1'b1) & (s_axis_video_TVALID == 1'b1))) begin
        s_axis_video_TREADY = 1'b1;
    end else begin
        s_axis_video_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_fu_336_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        s_axis_video_TREADY_int = 1'b1;
    end else begin
        s_axis_video_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln20_fu_336_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln20_fu_336_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln20_1_fu_347_p2 = (i_0_reg_198 + 31'd1);

assign add_ln20_fu_341_p2 = (indvar_flatten_reg_187 + 64'd1);

assign add_ln23_fu_492_p2 = (j_0_reg_220 + 31'd1);

assign add_ln28_1_fu_237_p2 = (start_y + 32'd83);

assign add_ln28_fu_231_p2 = (start_x + 32'd250);

assign and_ln28_fu_461_p2 = (xor_ln28_fu_455_p2 & select_ln20_1_fu_375_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln20_fu_336_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln20_fu_336_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((icmp_ln20_fu_336_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln20_fu_336_p2 == 1'd0) & (s_axis_video_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln20_reg_561 == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln20_reg_561_pp0_iter1_reg == 1'd0) & (m_axis_video_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bound_fu_307_p0 = bound_fu_307_p00;

assign bound_fu_307_p00 = hsize_in;

assign bound_fu_307_p1 = bound_fu_307_p10;

assign bound_fu_307_p10 = vsize_in;

assign bound_fu_307_p2 = (bound_fu_307_p0 * bound_fu_307_p1);

assign icmp_ln20_fu_336_p2 = ((indvar_flatten_reg_187 == bound_reg_556) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_331_p2 = (($signed(zext_ln23_fu_327_p1) < $signed(hsize_in)) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_322_p2 = (($signed(zext_ln20_1_fu_313_p1) < $signed(add_ln28_1_reg_545)) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_427_p2 = (($signed(zext_ln20_2_fu_391_p1) < $signed(start_x_read_reg_530)) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_357_p2 = (($signed(zext_ln20_fu_353_p1) < $signed(start_y_read_reg_524)) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_370_p2 = (($signed(zext_ln20_fu_353_p1) < $signed(add_ln28_1_reg_545)) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_432_p2 = (($signed(zext_ln20_2_fu_391_p1) < $signed(add_ln28_reg_540)) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_317_p2 = (($signed(zext_ln20_1_fu_313_p1) < $signed(start_y_read_reg_524)) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_467_p2 = (($signed(zext_ln20_2_fu_391_p1) < $signed(select_ln29_reg_551)) ? 1'b1 : 1'b0);

assign im_esirem_V_address0 = sext_ln30_fu_472_p1;

assign im_polytech_V_address0 = sext_ln30_fu_472_p1;

assign j_fu_498_p3 = ((icmp_ln23_fu_331_p2[0:0] === 1'b1) ? add_ln23_fu_492_p2 : 31'd1);

assign lshr_ln29_1_fu_257_p4 = {{sub_ln29_fu_251_p2[31:1]}};

assign lshr_ln29_2_fu_277_p4 = {{hsize_in[31:1]}};

assign m_axis_video_TDATA_int = ((and_ln28_reg_610[0:0] === 1'b1) ? video_data_V_1_fu_509_p3 : empty_reg_575_0);

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign or_ln28_1_fu_449_p2 = (xor_ln28_1_fu_437_p2 | or_ln28_fu_443_p2);

assign or_ln28_fu_443_p2 = (select_ln20_fu_362_p3 | icmp_ln28_2_fu_427_p2);

assign pixel_2_fu_484_p3 = ((and_ln28_fu_461_p2[0:0] === 1'b1) ? pixel_fu_478_p2 : pixel_1_reg_209);

assign pixel_fu_478_p2 = ($signed(pixel_1_reg_209) + $signed(32'd1));

assign select_ln20_1_fu_375_p3 = ((icmp_ln23_fu_331_p2[0:0] === 1'b1) ? icmp_ln28_1_fu_322_p2 : icmp_ln28_4_fu_370_p2);

assign select_ln20_2_fu_383_p3 = ((icmp_ln23_fu_331_p2[0:0] === 1'b1) ? j_0_reg_220 : 31'd0);

assign select_ln20_3_fu_395_p3 = ((icmp_ln23_fu_331_p2[0:0] === 1'b1) ? i_0_reg_198 : add_ln20_1_fu_347_p2);

assign select_ln20_fu_362_p3 = ((icmp_ln23_fu_331_p2[0:0] === 1'b1) ? icmp_ln28_fu_317_p2 : icmp_ln28_3_fu_357_p2);

assign select_ln29_fu_291_p3 = ((tmp_fu_243_p3[0:0] === 1'b1) ? sub_ln29_1_fu_271_p2 : zext_ln29_1_fu_287_p1);

assign sext_ln30_fu_472_p1 = pixel_1_reg_209;

assign sub_ln29_1_fu_271_p2 = (32'd0 - zext_ln29_fu_267_p1);

assign sub_ln29_fu_251_p2 = (32'd0 - hsize_in);

assign tmp_fu_243_p3 = hsize_in[32'd31];

assign video_data_V_1_fu_509_p3 = ((icmp_ln29_reg_615[0:0] === 1'b1) ? im_esirem_V_q0 : im_polytech_V_q0);

assign xor_ln28_1_fu_437_p2 = (icmp_ln28_5_fu_432_p2 ^ 1'd1);

assign xor_ln28_fu_455_p2 = (or_ln28_1_fu_449_p2 ^ 1'd1);

assign zext_ln20_1_fu_313_p1 = i_0_reg_198;

assign zext_ln20_2_fu_391_p1 = select_ln20_2_fu_383_p3;

assign zext_ln20_fu_353_p1 = add_ln20_1_fu_347_p2;

assign zext_ln23_fu_327_p1 = j_0_reg_220;

assign zext_ln29_1_fu_287_p1 = lshr_ln29_2_fu_277_p4;

assign zext_ln29_fu_267_p1 = lshr_ln29_1_fu_257_p4;

endmodule //incrust
